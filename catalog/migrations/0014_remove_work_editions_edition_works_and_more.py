# Generated by Django 4.2.18 on 2025-01-27 05:56

from django.db import migrations, models
import django.db.models.deletion


def rename_legacy_editions(apps, schema_editor):
    Edition = apps.get_model("catalog", "Edition")
    Work = apps.get_model("catalog", "Work")
    for edition in Edition.objects.all():
        works = edition.works.all()
        if works.exists():
            for work in works:
                edition.legacy_works.add(work)
            edition.save()


def merge_to(self, to_item: "Item | None"):
    if to_item is None:
        if self.merged_to_item is not None:
            self.merged_to_item = None
            self.save()
        return
    if to_item.pk == self.pk:
        raise ValueError("cannot merge to self")
    if to_item.merged_to_item is not None:
        raise ValueError("cannot merge to item which is merged to another item")
    if not isinstance(to_item, self.__class__):
        raise ValueError("cannot merge to item in a different model")
    self.merged_to_item = to_item
    self.save()
    for res in self.external_resources.all():
        res.item = to_item
        res.save()
    for edition in self.legacy_editions.all():
        edition.works = to_item
        edition.save()
    to_item.save()


def merge_works(apps, schema_editor):
    Edition = apps.get_model("catalog", "Edition")
    Work = apps.get_model("catalog", "Work")
    for edition in Edition.objects.all():
        works = edition.legacy_works.all()
        if works.exists():
            edition.works = works.first()
            for work in works[1:]:
                merge_to(work, edition.works)
            edition.save()


def process_pending_trigger_events(apps, schema_editor):
    # Ensure all pending trigger events are processed
    schema_editor.connection.cursor().execute("SET CONSTRAINTS ALL IMMEDIATE")


class Migration(migrations.Migration):
    dependencies = [
        ("catalog", "0013_delete_series_alter_externalresource_id_type_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="work",
            name="legacy_editions",
            field=models.ManyToManyField(
                related_name="legacy_works", to="catalog.edition"
            ),
        ),
        migrations.RunPython(rename_legacy_editions),
        migrations.RemoveField(
            model_name="work",
            name="editions",
        ),
        migrations.AddField(
            model_name="edition",
            name="works",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="editions",
                to="catalog.work",
            ),
        ),
        migrations.RunPython(process_pending_trigger_events),
        migrations.RunPython(merge_works),
        migrations.RemoveField(
            model_name="work",
            name="legacy_editions",
        ),
    ]
